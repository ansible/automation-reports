"""
Django settings for DjangoProject project.

Generated by 'django-admin startproject' using Django 4.2.17.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
import socket
import sys
import traceback
from datetime import timedelta
from pathlib import Path

from split_settings.tools import optional, include


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-cu=@gv*8$8+rr2-^-8^g00!ib_9-utgu!26#q#@)!y%3#wt^1#'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True


ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    'localhost:8000',
    'localhost:3000',
    'testserver'
]

# Application definition

INSTALLED_APPS = [
    # 'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'django_generate_series',
    'corsheaders',
    'rest_framework',
    'django_filters',
    'backend',
    'backend.apps.clusters',
    'backend.apps.common',
    'backend.apps.scheduler',
    'backend.apps.dispatch',
    'backend.apps.tasks',
    'backend.apps.users',
    'backend.apps.aap_auth',
    'solo',
]

AUTH_USER_MODEL = "users.User"


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

REST_FRAMEWORK = {
    "DEFAULT_FILTER_BACKENDS": (
        "rest_framework.filters.OrderingFilter",
        "rest_framework.filters.SearchFilter",
        "django_filters.rest_framework.DjangoFilterBackend",
    ),
    'DEFAULT_PAGINATION_CLASS': 'backend.common.pagination.StandardResultsSetPagination',
    'PAGE_SIZE': 100,

    # TEMP - only until oauth2 is implemented.
    # We need this because nginx uses BasicAuth
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'backend.apps.aap_auth.authentication.AAPAuthentication',
    ],
}

ROOT_URLCONF = 'django_config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_config.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases


LOG_LEVEL = 'INFO'


DB_NAME = 'DB_NAME'
DB_USER = 'DB_USER'
DB_PASSWORD = 'DB_PASSWORD'
DB_HOST = 'DB_HOST'
DB_PORT = 'DB_PORT'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': DB_NAME,
        'USER': DB_USER,
        'PASSWORD': DB_PASSWORD,
        'HOST': DB_HOST,
        'PORT': DB_PORT,
    }
}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'dispatcher': {'format': '%(asctime)s %(levelname)-8s [%(guid)s] %(name)s PID:%(process)d %(message)s'},
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "stream": sys.stdout,
            "formatter": "verbose",
        },
    },
    "root": {
        "handlers": ["console"],
        "formatter": "verbose",
        "level": LOG_LEVEL,
    },
    "loggers": {
        'django': {'handlers': ['console']},
        'automation_dashboard.models': {'handlers': ['console']},
        'automation_dashboard.consumers': {'handlers': ['console']},
        'automation_dashboard.dispatch': {'handlers': ['console']},
        'automation_dashboard.tasks': {'handlers': ['console']},
        'automation_dashboard.tasks.jobs': {'handlers': ['console']},
        'automation_dashboard.tasks.utils': {'handlers': ['console']},
        'automation_dashboard.scheduler': {'handlers': ['console']},
        'automation_dashboard.utils': {'handlers': ['console']},
        'automation_dashboard.tasks.system': {'handlers': ['console']}
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATIC_ROOT = "static"
STATIC_URL = "/static/"

STATICFILES_DIRS = [
    BASE_DIR / "templates/static",
]

MEDIA_URL = "/media/"
MEDIA_ROOT = "media"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ALLOWED_ORIGINS = [
    "http://localhost:9000",
    "http://localhost:8080",
    "http://0.0.0.0:8080",
]
# CORS_ORIGIN_ALLOW_ALL = True

# Defaults

# Default Time taken to manually execute automation (min)
DEFAULT_TIME_TAKEN_TO_MANUALLY_EXECUTE_MINUTES = 60

# Default Time taken to manually create automation (min)
DEFAULT_TIME_TAKEN_TO_CREATE_AUTOMATION_MINUTES = 60

#Default average cost of an employee per minute
DEFAULT_MANUAL_COST_AUTOMATION = 50

#Deafult cost per minute of AAP
DEFAULT_AUTOMATED_PROCESS_COST = 20


# feature flags
FLAG_SOURCES = ('flags.sources.SettingsFlagsSource',)
FLAGS = {
    'FEATURE_INDIRECT_NODE_COUNTING_ENABLED': [{'condition': 'boolean', 'value': False}],
    'FEATURE_DISPATCHERD_ENABLED': [{'condition': 'boolean', 'value': False}],
}

# Whether or not the deployment is a K8S-based deployment
# In K8S-based deployments, instances have zero capacity - all playbook
# automation is intended to flow through defined Container Groups that
# interface with some (or some set of) K8S api (which may or may not include
# the K8S cluster where itself is running)
IS_K8S = False

CLUSTER_HOST_ID = socket.gethostname()

DISPATCHERD_DEBUGGING_SOCKFILE = "/tmp/demo_dispatcher.sock"

# The number of processes spawned by the callback receiver to process job
# events into the database
JOB_EVENT_WORKERS = 4

# Time out task managers if they take longer than this many seconds, plus TASK_MANAGER_TIMEOUT_GRACE_PERIOD
# We have the grace period so the task manager can bail out before the timeout.
TASK_MANAGER_TIMEOUT = 300
TASK_MANAGER_TIMEOUT_GRACE_PERIOD = 60
TASK_MANAGER_LOCK_TIMEOUT = TASK_MANAGER_TIMEOUT + TASK_MANAGER_TIMEOUT_GRACE_PERIOD

SHOW_URLLIB3_INSECURE_REQUEST_WARNING = True

DISPATCHER_SCHEDULE = {}

DISPATCHER_SYNC_CHANNEL = 'automation_dashboard_sync_channel'
DISPATCHER_PARSE_CHANNEL = 'automation_dashboard_parse_channel'

SCHEDULE_MAX_DATA_PARSE_JOBS = 30
START_TASK_LIMIT = 50
# Amount of time dispatcher will try to reconnect to database for jobs and consuming new work
DISPATCHER_DB_DOWNTIME_TOLERANCE = 40

CELERYBEAT_SCHEDULE = {
    'periodic_sync_manager':
        {
            'task': 'backend.apps.tasks.system.automation_dashboard_periodic_scheduler',
            'schedule': timedelta(seconds=20),
            'options': {'expires': 20}
        },
    'sync_task_manager':
        {
            'task': 'backend.apps.scheduler.tasks.sync_task_manager',
            'schedule': timedelta(seconds=20),
            'options': {'expires': 20}
        },
    'data_parser_task_manager':
        {
            'task': 'backend.apps.tasks.system.automation_dashboard_job_parser_data_scheduler',
            'schedule': timedelta(seconds=5),
            'options': {'expires': 5}
        },
}

for options in CELERYBEAT_SCHEDULE.values():
    new_options = options.copy()
    task_name = options['task']
    new_options['schedule'] = options['schedule'].total_seconds()
    DISPATCHER_SCHEDULE[task_name] = new_options

JWT_ACCESS_TOKEN_LIFETIME_SECONDS = 60
JWT_REFRESH_TOKEN_LIFETIME_SECONDS = (60 * 60 * 24)

AAP_AUTH_PROVIDER = {
    'name': 'AAP', # User-friendly name to show in UI login page
    'protocol': 'https',
    'url': '<aap url>',
    'user_data_endpoint': '<aap url like /api/gateway/v1/me/>',
    'check_ssl': False,
    'client_id': '<client ID>',
    'client_secret': '<client secret>',
}


### Local settings
local_config_file = os.path.join(BASE_DIR, "django_config", "local_settings.py")
try:
    include(optional(local_config_file), scope=locals())
except ImportError:
    pass

# Load settings from REPORTER_SETTINGS_DIR
settings_dir = os.environ.get('REPORTER_SETTINGS_DIR', '/etc/reporter/conf.d/')
settings_files = os.path.join(settings_dir, '*.py')
if os.path.isdir(settings_dir):
    try:
        include(optional(settings_files), scope=locals())
    except ImportError:
        traceback.print_exc()
        sys.exit(1)
