# Generated by Django 4.2.17 on 2025-10-20 10:08

from django.db import migrations, transaction
from django.db.models import Count, Q

def resolve_duplicates(apps, schema_editor):
    models = [
        {
            "app_model": apps.get_model('clusters', 'Organization'),
            "key": "organization_id",
        },
        {
            "app_model": apps.get_model('clusters', 'JobTemplate'),
            "key": "job_template_id",
        },
        {
            "app_model": apps.get_model('clusters', 'AAPUser'),
            "key": "launched_by_id",
        },
        {
            "app_model": apps.get_model('clusters', 'Inventory'),
            "key": "inventory_id",
        },
        {
            "app_model": apps.get_model('clusters', 'ExecutionEnvironment'),
            "key": "execution_environment_id",
        },
        {
            "app_model": apps.get_model('clusters', 'InstanceGroup'),
            "key": "instance_group_id",
        },
        {
            "app_model": apps.get_model('clusters', 'Project'),
            "key": "project_id",
        },
    ]

    jobs_model = apps.get_model('clusters', 'Job')
    with transaction.atomic():
        for model in models:
            app_model = model['app_model']
            key = model['key']
            duplicates = (
                app_model.objects
                .values('name', 'cluster_id')
                .annotate(count=Count('id'))
                .filter(count__gt=1)
            )
            for dup in duplicates:
                ids = list(app_model.objects.filter(name=dup['name'], cluster_id=dup['cluster_id']).values_list('id', flat=True))
                primary_id = ids.pop(0)  # Keep the first ID as primary
                jobs_model.objects.filter(**{f"{key}__in": ids}).update(**{key: primary_id})
                app_model.objects.filter(id__in=ids).delete()

def resolve_label_duplicates(apps, schema_editor):
    labels_model = apps.get_model('clusters', 'Label')
    job_label_model = apps.get_model('clusters', 'JobLabel')
    duplicates = (
        labels_model.objects
        .values('name', 'cluster_id')
        .annotate(count=Count('id'))
        .filter(count__gt=1)
    )
    with transaction.atomic():
        for dup in duplicates:
            ids = list(labels_model.objects.filter(name=dup['name'], cluster_id=dup['cluster_id']).values_list('id', flat=True))
            primary_id = ids.pop(0)
            job_label_model.objects.filter(label_id__in=ids).update(label_id=primary_id)
            labels_model.objects.filter(id__in=ids).delete()

def resolve_label_duplicates(apps, schema_editor):
    labels_model = apps.get_model('clusters', 'Label')
    job_label_model = apps.get_model('clusters', 'JobLabel')
    duplicates = (
        labels_model.objects
        .values('name', 'cluster_id')
        .annotate(count=Count('id'))
        .filter(count__gt=1)
    )
    with transaction.atomic():
        for dup in duplicates:
            ids = list(labels_model.objects.filter(name=dup['name'], cluster_id=dup['cluster_id']).values_list('id', flat=True))
            primary_id = ids.pop(0)
            job_label_model.objects.filter(label_id__in=ids).update(label_id=primary_id)
            labels_model.objects.filter(id__in=ids).delete()

def resolve_host_duplicates(apps, schema_editor):
    host_model = apps.get_model('clusters', 'Host')
    job_host_summary_model = apps.get_model('clusters', 'JobHostSummary')
    duplicates = (
        host_model.objects
        .values('name', 'cluster_id')
        .annotate(count=Count('id'))
        .filter(count__gt=1)
    )
    with transaction.atomic():
        for dup in duplicates:
            ids = list(host_model.objects.filter(name=dup['name'], cluster_id=dup['cluster_id']).values_list('id', flat=True))
            primary_id = ids.pop(0)
            job_host_summary_model.objects.filter(host_id__in=ids).update(host_id=primary_id)
            host_model.objects.filter(id__in=ids).delete()


def resolve_aap_user_duplicates(apps, schema_editor):
    aap_user_model = apps.get_model('clusters', 'AAPUser')
    jobs_model = apps.get_model('clusters', 'Job')

    duplicates = (
        aap_user_model.objects
        .values('name', 'cluster_id', 'type')
        .annotate(count=Count('id'))
        .filter(count__gt=1)
    )
    for dup in duplicates:
        ids = list(aap_user_model.objects.filter(name=dup['name'], cluster_id=dup['cluster_id'], type=dup['type']).values_list('id', flat=True))
        primary_id = ids.pop(0)  # Keep the first ID as primary
        jobs_model.objects.filter(launched_by_id__in=ids).update(launched_by_id=primary_id)
        aap_user_model.objects.filter(id__in=ids).delete()

class Migration(migrations.Migration):

    dependencies = [
        ('clusters', '0014_alter_jobtemplate_time_taken_manually_execute_minutes'),
    ]

    operations = [
        migrations.RunPython(resolve_duplicates),
        migrations.RunPython(resolve_label_duplicates),
        migrations.RunPython(resolve_host_duplicates),
        migrations.RunPython(resolve_aap_user_duplicates),
    ]
