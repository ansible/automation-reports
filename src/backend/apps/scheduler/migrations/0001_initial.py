# Generated by Django 4.2.17 on 2025-07-03 10:16

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('clusters', '0010_cluster_aap_version'),
    ]

    operations = [
        migrations.CreateModel(
            name='SyncScheduleState',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('schedule_last_run', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SyncSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512)),
                ('enabled', models.BooleanField(default=True, help_text='Enables processing of this schedule.')),
                ('dtstart', models.DateTimeField(default=None, editable=False, help_text='The first occurrence of the schedule occurs on or after this time.', null=True)),
                ('dtend', models.DateTimeField(default=None, editable=False, help_text='The last occurrence of the schedule occurs before this time, afterwards the schedule expires.', null=True)),
                ('rrule', models.TextField(help_text='A value representing the schedules iCal recurrence rule.')),
                ('next_run', models.DateTimeField(default=None, editable=False, help_text='The next time that the scheduled action will run.', null=True)),
                ('cluster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clusters.cluster')),
            ],
            options={
                'ordering': [models.OrderBy(models.F('next_run'), descending=True, nulls_last=True), 'id'],
                'unique_together': {('cluster', 'name')},
            },
        ),
        migrations.CreateModel(
            name='SyncJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('internal_created', models.DateTimeField(auto_now_add=True)),
                ('internal_modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=512)),
                ('status', models.CharField(choices=[('new', 'New'), ('pending', 'Pending'), ('waiting', 'Waiting'), ('running', 'Running'), ('successful', 'Successful'), ('failed', 'Failed'), ('error', 'Error'), ('canceled', 'Canceled')], default='new', editable=False, max_length=32)),
                ('type', models.CharField(choices=[('Sync jobs', 'Sync jobs'), ('Parse job data', 'Parse job data')], default='Sync jobs', editable=False, max_length=32)),
                ('launch_type', models.CharField(choices=[('manual', 'Manual'), ('relaunch', 'Relaunch'), ('callback', 'Callback'), ('scheduled', 'Scheduled'), ('dependency', 'Dependency'), ('workflow', 'Workflow'), ('webhook', 'Webhook'), ('sync', 'Sync'), ('scm', 'SCM Update')], db_index=True, default='manual', editable=False, max_length=20)),
                ('job_args', models.TextField(blank=True, default='', editable=False)),
                ('celery_task_id', models.CharField(blank=True, default='', editable=False, max_length=100)),
                ('started', models.DateTimeField(default=None, editable=False, help_text='The date and time the job was queued for starting.', null=True)),
                ('finished', models.DateTimeField(db_index=True, default=None, editable=False, help_text='The date and time the job finished execution.', null=True)),
                ('elapsed', models.DecimalField(decimal_places=3, default=0, editable=False, help_text='Elapsed time in seconds that the job ran.', max_digits=12)),
                ('explanation', models.TextField(blank=True, default='', editable=False, help_text="A status field to indicate the state of the job if it wasn't able to run and capture stdout")),
                ('cluster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clusters.cluster')),
                ('cluster_sync_data', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='clusters.clustersyncdata')),
                ('sync_schedule', models.ForeignKey(default=None, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='scheduler.syncschedule')),
            ],
            options={
                'ordering': ['internal_created', 'id'],
            },
        ),
    ]
